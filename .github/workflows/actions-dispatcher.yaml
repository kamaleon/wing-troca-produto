name: Blue/Green deploy [PRD]

on:
  workflow_dispatch:
    inputs:
      apply:
        description: 'Permissão para deploy em produção'
        required: true
        default: 'false'
        type: choice
        options:
        - true
        - false

env:
  ECR_REPOSITORY: korporate/${{ github.event.repository.name }}

#Start a project run os Ubuntu Machine  

jobs:
  build_image:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Java 11
        uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: 'adopt'

      - uses: actions/cache@v3
        name: Cache dependencies
        with:
          path: ~/.m2
          key: stacy-m2-dependencies


      # Build a project with maven

      - name: Build with Maven
        run: mvn -s $GITHUB_WORKSPACE/.github/workflows/maven-settings.xml -B package --file pom.xml
        env:
          PACKAGES_USER: ${{ secrets.PACKAGES_USER_PRD }}
          PACKAGES_TOKEN: ${{ secrets.PACKAGES_TOKEN_PRD }}

      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PRD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PRD }}
          aws-region: ${{ secrets.AWS_REGION_PRD }}

      # Login into ECR Repository

      - name: Logando no ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag and push image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          PROJECT_VERSION="$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)"
          echo export IMAGE_TAG="SNAPSHOT-$PROJECT_VERSION-$(git rev-parse --short "$GITHUB_SHA")" > image.env
          source image.env
          docker build --file Dockerfile --build-arg repo=${{ github.event.repository.name }} --build-arg environment=prd --tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      # Upload files to git hub arctifact

      - name: Upload math result for job 2
        uses: actions/upload-artifact@v3
        with:
          name: my-artifact
          path: ${{ github.workspace }}/image.env
          retention-days: 1

   # Deploy stage

  argocd_setup:
    runs-on: ubuntu-latest
    needs: build_image
    steps:
      - uses: actions/checkout@v2
      - name: Configure AWS Credentials to ECR
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PRD  }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PRD }}
          aws-region: ${{ secrets.AWS_REGION_PRD }}
        
      - uses: aws-actions/amazon-ecr-login@v1
        id: login-ecr
      
      - name: Download Macth Result for Job 2
        uses: actions/download-artifact@v3
        with:
          name: my-artifact
          path: ${{ github.workspace }}/image.env
          
      - if: ${{ inputs.apply }} == true
        name: Deploy ${{ github.event.repository.name }} em EKS
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          git config --global user.email ${{ secrets.KORPORATE_GITHUB_USER_EMAIL  }}
          git config --global user.name ${{ secrets.KORPORATE_GITHUB_USER_NAME  }}
          git clone https://${{ secrets.KORPORATE_CI_JOB_TOKEN }}@github.com/kamaleon/argo-cd.git
          
          #Set TAG Image
          source ${{ github.workspace }}/image.env/image.env
          newTag=$(echo $IMAGE_TAG | cut -d ':' -f2)
          oldTag=$(grep -m1 -e "newTag:" ./argo-cd/PRD_Argo_Configs/deployments/prd/pix-multibancos/${{ github.event.repository.name }}/overlays/kustomization.yaml | cut -d ':' -f2)
          sed -i "s|$oldTag| $newTag|" ./argo-cd/PRD_Argo_Configs/deployments/prd/pix-multibancos/${{ github.event.repository.name }}/overlays/kustomization.yaml
          cd ./argo-cd/PRD_Argo_Configs 
          #Git Add e Push Project
          git add . && git commit -am "Editando ${{ github.event.repository.name }} em PRD - $newTag"
          git push https://${{ secrets.KORPORATE_CI_JOB_TOKEN }}@github.com/kamaleon/argo-cd.git HEAD:master
          
  argocd_refresh:
    runs-on: prd-korporate
    needs: argocd_setup
    steps:
      - name: Login ArgoCD and Refresh
        run: |
          cd /usr/local/bin
          ./argocd login argocd-prd.korporate.tech --username argopipelines --password ${{ secrets.ARGOCD_PASSWORD }}
          ./argocd app get ${{ github.event.repository.name }}-prd --refresh